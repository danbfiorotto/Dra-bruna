name: App CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'app-bruna/**'
      - 'design-tokens/**'
      - '.github/workflows/app-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app-bruna/**'
      - 'design-tokens/**'
      - '.github/workflows/app-ci.yml'
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'
  WORKING_DIRECTORY: './app-bruna'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            app-bruna/package-lock.json
            design-tokens/package-lock.json
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint TypeScript
        run: npm run lint
      
      - name: Lint design tokens
        run: npm run lint --workspace=design-tokens

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            app-bruna/package-lock.json
            design-tokens/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check
      
      - name: Type check design tokens
        run: npm run build --workspace=design-tokens

  rust-check:
    name: Rust Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './app-bruna/src-tauri -> target'
      
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest
      
      - name: Rust format check
        run: cargo fmt --all -- --check
      
      - name: Rust clippy check
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, rust-check]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            app-bruna/package-lock.json
            design-tokens/package-lock.json
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './app-bruna/src-tauri -> target'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build design tokens
        run: npm run build --workspace=design-tokens
      
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest
      
      - name: Build app
        run: npm run tauri:build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            app-bruna/src-tauri/target/release/bundle/
          retention-days: 30

  build-matrix:
    name: Build Matrix (x64/arm64)
    runs-on: ${{ matrix.platform }}
    needs: [lint, type-check, rust-check]
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os: linux
          - platform: macos-latest
            target: x86_64-apple-darwin
            os: macos
          - platform: macos-latest
            target: aarch64-apple-darwin
            os: macos
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            app-bruna/package-lock.json
            design-tokens/package-lock.json
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './app-bruna/src-tauri -> target'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build design tokens
        run: npm run build --workspace=design-tokens
      
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest
      
      - name: Build app for ${{ matrix.target }}
        run: npm run tauri:build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_TARGET: ${{ matrix.target }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build-${{ matrix.target }}
          path: |
            app-bruna/src-tauri/target/${{ matrix.target }}/release/bundle/
          retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, build-matrix]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create release draft
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            artifacts/app-build-*/**/*
          body: |
            ## Dra. Bruna App v${{ github.event.release.tag_name }}
            
            ### Downloads
            - **Windows**: `app-bruna-setup.exe`
            - **macOS (Intel)**: `app-bruna.app.tar.gz`
            - **macOS (Apple Silicon)**: `app-bruna.app.tar.gz`
            - **Linux**: `app-bruna.AppImage`
            
            ### Changes
            See the [changelog](CHANGELOG.md) for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
